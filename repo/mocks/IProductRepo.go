// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/kaisersuzaku/BE_A/models"
)

// IProductRepo is an autogenerated mock type for the IProductRepo type
type IProductRepo struct {
	mock.Mock
}

// Begin provides a mock function with given fields: ctx
func (_m *IProductRepo) Begin(ctx context.Context) *gorm.DB {
	ret := _m.Called(ctx)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(context.Context) *gorm.DB); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Commit provides a mock function with given fields: ctx, tx
func (_m *IProductRepo) Commit(ctx context.Context, tx *gorm.DB) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: ctx, id, product
func (_m *IProductRepo) Read(ctx context.Context, id uint, product *models.Product) {
	_m.Called(ctx, id, product)
}

// ReadForUpdateByID provides a mock function with given fields: ctx, tx, id, product
func (_m *IProductRepo) ReadForUpdateByID(ctx context.Context, tx *gorm.DB, id uint, product *models.Product) error {
	ret := _m.Called(ctx, tx, id, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uint, *models.Product) error); ok {
		r0 = rf(ctx, tx, id, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rollback provides a mock function with given fields: ctx, tx
func (_m *IProductRepo) Rollback(ctx context.Context, tx *gorm.DB) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, tx, product
func (_m *IProductRepo) Update(ctx context.Context, tx *gorm.DB, product models.Product) error {
	ret := _m.Called(ctx, tx, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, models.Product) error); ok {
		r0 = rf(ctx, tx, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
